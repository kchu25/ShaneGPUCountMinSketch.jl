var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ShaneGPUCountMinSketch","category":"page"},{"location":"#ShaneGPUCountMinSketch","page":"Home","title":"ShaneGPUCountMinSketch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ShaneGPUCountMinSketch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ShaneGPUCountMinSketch]","category":"page"},{"location":"#ShaneGPUCountMinSketch.gpu_cms","page":"Home","title":"ShaneGPUCountMinSketch.gpu_cms","text":"d: the dimension of the configuration     e.g. for a configuration of 3 elements, d = 3     e.g. (f₁, d₁₂, f₂) config of length 3          (f₁, d₁₂, f₂, d₂₃, f₃) config of length 5\n\n\n\n\n\n","category":"type"},{"location":"#ShaneGPUCountMinSketch.check_and_fill_placeholder!-Tuple{ShaneGPUCountMinSketch.record}","page":"Home","title":"ShaneGPUCountMinSketch.check_and_fill_placeholder!","text":"obtain placeholder_count\n\n\n\n\n\n","category":"method"},{"location":"#ShaneGPUCountMinSketch.count!-Tuple{ShaneGPUCountMinSketch.record}","page":"Home","title":"ShaneGPUCountMinSketch.count!","text":"combs_gpu: the combinations of the non-zero code components\nc: the CountMinSketch object\nA: Array that contains the code\n    A[:,1,n] contains the placements\n    A[:,2,n] contains the corresponding filter indices\nfil_len: the length of the filter; supply by the user\n\nmodify the CountMinSketch object c in place\n\nnote: A could be a parition (TODO)\n\n\n\n\n\n","category":"method"},{"location":"#ShaneGPUCountMinSketch.filter_empty_seq!-Tuple{Dict{Int64, Vector{CartesianIndex{2}}}}","page":"Home","title":"ShaneGPUCountMinSketch.filter_empty_seq!","text":"filteremptyseq!(nz_dict::Dict{Int, Vector{CartesianIndex{2}}})     Filter out keys (seq) that have empty values\n\n\n\n\n\n","category":"method"},{"location":"#ShaneGPUCountMinSketch.generate_combinations-Tuple{Integer, Integer}","page":"Home","title":"ShaneGPUCountMinSketch.generate_combinations","text":"input:      numfils: the number of filters in the configuration     maxnz_len: the maximum number of the non-zero code components         (this needs to be counted first as to reduce the number of combinations)\n\n\n\n\n\n","category":"method"},{"location":"#ShaneGPUCountMinSketch.get_A_and_combs!-Tuple{Dict{Int64, Vector{CartesianIndex{2}}}, Any}","page":"Home","title":"ShaneGPUCountMinSketch.get_A_and_combs!","text":"getA!(nzdict::Dict{Int, Vector{CartesianIndex{2}}})     Take non-zero code components         i.e. Dict{Int => Vector{CartesianIndex{2}}}                   seq => [(pos, fil)]     and convert it to an Array of records\n\nIn another word: construct the Array A: Array that contains the code     A[:,1,n] contains the placements     A[:,2,n] contains the corresponding filter indices\n\nIn the process it also deletes the empty seqs in nz_dict\n\nNote: can partition nz_dict     into the 1st 1000 entries, 2nd 1000 entries, etc...         in case the memory usage is a concern\n\nreturns the cpu and gpu version of A     i.e. returns Acpu, Agpu\n\n\n\n\n\n","category":"method"},{"location":"#ShaneGPUCountMinSketch.get_max_nz_len-Tuple{Dict{Int64, Vector{CartesianIndex{2}}}}","page":"Home","title":"ShaneGPUCountMinSketch.get_max_nz_len","text":"Get maximum number of non-zero code components in our records     This is to construct the upperbound of the Array of records\n\n\n\n\n\n","category":"method"}]
}
